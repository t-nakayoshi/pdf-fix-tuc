#!/usr/bin/env python3

#
# Fix ToUnicode CMap in PDF
# https://github.com/trueroad/pdf-fix-tuc
#
# build_table.py:
#   Build radical to ideograph table.
#
# Copyright (C) 2021 Masamichi Hosoda.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

# See tt_cmap.c in dvipdfmx source.
def is_PUA_or_presentation (unicode):
    uni = int (unicode.lstrip ('U+'), base = 16)

    if uni >= 0x2E80 and uni <= 0x2EF3:
        return True
    if uni >= 0x2F00 and uni <= 0x2FD5:
        return True
    if uni >= 0xE000 and uni <= 0xF8FF:
        return True
    if uni >= 0xFB00 and uni <= 0xFB4F:
        return True
    if uni >= 0xF900 and uni <= 0xFAFF:
        return True
    if uni >= 0x2F800 and uni <= 0x2FA1F:
        return True
    if uni >= 0xF0000 and uni <= 0xFFFFD:
        return True
    if uni >= 0x100000 and uni <= 0x10FFFD:
        return True
    if uni == 0x00AD:
        return True
    return False

def process (file):
    with open (file, "r") as f:
        for line in f:
            if line.startswith ("#"):
                continue
            items = line.split ()
            unijis2004 = items[18]
            if ':' in unijis2004:
                unis = unijis2004.split (':')
                lows = []
                highs = []
                for u in unis:
                    if is_PUA_or_presentation (u):
                        lows.append (u)
                    else:
                        highs.append (u)
                if len (lows) > 0 and len (highs) > 0:
                    for low in lows:
                        key = int (low.lstrip ('U+'), base = 16)
                        value = int (highs[0].lstrip ('U+'), base = 16)
                        if key < 0x10000 and value >= 0x10000:
                            print ("    // { " + \
                                   "0x{:x}, 0x{:x}".format (key, value) + \
                                   " },")
                        else:
                            print ("    { " + \
                                   "0x{:x}, 0x{:x}".format (key, value) + \
                                   " },")

def main ():
    input_filename = "aj17-kanji.txt"

    print ('''\
// Generated by build_table.py
// Do not edit this file.

#include <unordered_map>

#include "tounicode.hh"

const std::unordered_map<int, int> tounicode::table_ =
  {\
''')

    process (input_filename)

    print ('''\
  };\
''')

if __name__ == "__main__":
    main ()
